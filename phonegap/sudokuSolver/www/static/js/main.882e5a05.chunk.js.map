{"version":3,"sources":["backtracking-solver/solver.worker.js","CellEditor.js","model.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Worker","CellEditor","onChange","cell","className","type","pattern","value","val","zeroToEight","Array","from","keys","createEmptyModel","Im","map","hasNoCollisions","seq","reduce","r","v","result","found","concat","includes","extractCellValue","modelRowSequence","model","row","modelColSequence","col","boardSegmentSequence","extract","board","baseIndex","Math","floor","rowBaseIndex","colBaseIndex","rowOffset","colOffset","modelSegmentSequence","isValidBoard","rowSequence","colSequence","segmentSequence","isValidSource","source","x","isValidModel","modelFrom","length","parseInt","undefined","editorChange","setModel","e","parsedValue","setIn","setPreValue","target","cols","count","i","key","rows","demoBoard","Board","useState","modelIsValid","useMemo","status","setStatus","reverse","setReverse","reverseChanged","useCallback","checked","solveClick","showModel","processEmptyCells","worker","solverWorker","sm","_","debounce","leading","maxWait","Promise","res","onmessage","data","terminate","flush","postMessage","runSolver","then","clear","reset","onClick","App","Boolean","window","location","hostname","match","startApp","ReactDOM","render","document","getElementById","phonegap","addEventListener","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.882e5a05.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"3226d57e9921f8ebde03.worker.js\");\n};","import React from 'react';\n\nconst CellEditor = ({ onChange, cell }) => {\n  return (\n    <input\n      className={`cell ${cell ? cell.type : ''}`}\n      type=\"text\"\n      pattern=\"[1-9]?\"\n      onChange={onChange}\n      value={cell ? cell.val : ''}\n    />\n  );\n};\n\nexport default CellEditor;\n","import Im from 'seamless-immutable';\n\nconst zeroToEight = Array.from(Array(9).keys());\n\nconst createEmptyModel = () => Im(zeroToEight.map(() => new Array(9)));\n\nconst hasNoCollisions = seq =>\n  seq.reduce(\n    (r, v) =>\n      r.result && v\n        ? { found: r.found.concat(v), result: !r.found.includes(v) }\n        : r,\n    { found: Im([]), result: true }\n  ).result;\n\nconst sourceRowSequence = source => row => source[row];\nconst sourceColSequence = source => col => source.map(row => row[col]);\nconst extractCellValue = cell => (cell ? cell.val : 0);\nconst modelRowSequence = model => row => model[row].map(extractCellValue);\nconst modelColSequence = model => col =>\n  model.map(row => extractCellValue(row[col]));\n\nconst boardSegmentSequence = extract => board => (row, col) => {\n  const baseIndex = val => Math.floor(val / 3) * 3;\n  const rowBaseIndex = baseIndex(row);\n  const colBaseIndex = baseIndex(col);\n  return Im(\n    Array.from(\n      (function*() {\n        for (let rowOffset = 0; rowOffset < 3; rowOffset++)\n          for (let colOffset = 0; colOffset < 3; colOffset++)\n            yield extract(\n              board[rowBaseIndex + rowOffset][colBaseIndex + colOffset]\n            );\n      })()\n    )\n  );\n};\n\nconst modelSegmentSequence = boardSegmentSequence(extractCellValue);\nconst sourceSegmentSequence = boardSegmentSequence(x => x);\n\nconst isValidBoard = (rowSequence, colSequence, segmentSequence) => board => {\n  const sequences = [\n    ...zeroToEight.map(rowSequence(board)),\n    ...zeroToEight.map(colSequence(board)),\n    ...[\n      [0, 0],\n      [0, 3],\n      [0, 6],\n      [3, 0],\n      [3, 3],\n      [3, 6],\n      [6, 0],\n      [6, 3],\n      [6, 6]\n    ].map(([row, col]) => segmentSequence(board)(row, col))\n  ];\n  return sequences.reduce((r, v) => r && hasNoCollisions(v), true);\n};\nconst isValidSource = isValidBoard(\n  sourceRowSequence,\n  sourceColSequence,\n  sourceSegmentSequence\n);\nconst isValidModel = isValidBoard(\n  modelRowSequence,\n  modelColSequence,\n  modelSegmentSequence\n);\n\nconst modelFrom = source =>\n  isValidSource(source)\n    ? Im(\n        source.map(row =>\n          row.length === 9\n            ? row.map(cell => {\n                const val = parseInt(cell);\n                return val && val <= 9 ? { val, type: 'pre' } : undefined;\n              })\n            : new Array(9)\n        )\n      )\n    : createEmptyModel();\n\nconst canRowAcceptValue = model => (row, col) => val =>\n  hasNoCollisions(modelRowSequence(model)(row).set(col, val));\nconst canColAcceptValue = model => (row, col) => val =>\n  hasNoCollisions(modelColSequence(model)(col).set(row, val));\nconst canSegmentAcceptValue = model => (row, col) => val =>\n  hasNoCollisions(\n    modelSegmentSequence(model)(row, col).set((row % 3) * 3 + (col % 3), val)\n  );\n\nconst canAcceptValue = model => (row, col) => val =>\n  [canRowAcceptValue, canColAcceptValue, canSegmentAcceptValue].reduce(\n    (r, v) => r && v(model)(row, col)(val),\n    true\n  );\n\nconst addSolverValue = model => (row, col) => val =>\n  model.setIn([row, col], { val, type: 'solver' });\n\nconst setPreValue = model => (row, col) => val => {\n  const parsedValue = parseInt(val);\n  return model.setIn(\n    [row, col],\n    parsedValue && parsedValue <= 9\n      ? { val: parsedValue, type: 'pre' }\n      : undefined\n  );\n};\n\nexport {\n  createEmptyModel,\n  modelFrom,\n  isValidSource,\n  isValidModel,\n  sourceRowSequence,\n  sourceColSequence,\n  modelRowSequence,\n  modelColSequence,\n  modelSegmentSequence,\n  hasNoCollisions,\n  canRowAcceptValue,\n  canColAcceptValue,\n  canSegmentAcceptValue,\n  canAcceptValue,\n  addSolverValue,\n  setPreValue\n};\n","import React, { useState, useMemo, useCallback } from 'react';\nimport _ from 'lodash';\nimport './Board.css';\nimport CellEditor from './CellEditor';\nimport {\n  setPreValue,\n  isValidModel,\n  modelFrom,\n  createEmptyModel\n} from './model';\nimport solverWorker from './backtracking-solver/solver.worker';\n\nconst editorChange = (model, setModel, row, col) => e => {\n  setModel(setPreValue(model)(row, col)(e.target.value));\n};\n\nconst cols = function*(model, setModel, row, count) {\n  for (let i = 0; i < count; i++)\n    yield (\n      <td key={`col${row}${i}`} className=\"board\">\n        <CellEditor\n          onChange={editorChange(model, setModel, row, i)}\n          cell={model[row][i]}\n        />\n      </td>\n    );\n};\n\nconst rows = function*(model, setModel, count) {\n  for (let i = 0; i < count; i++)\n    yield (\n      <tr key={`row${i}`} className=\"board\">\n        {Array.from(cols(model, setModel, i, 9))}\n      </tr>\n    );\n};\n\nconst runSolver = (model, showModel, processEmptyCells) => {\n  const worker = new solverWorker();\n  const sm = _.debounce(showModel, 30, { leading: true, maxWait: 200 });\n  return new Promise(res => {\n    worker.onmessage = e => {\n      const { type, model } = e.data;\n      sm(model);\n      if (type === 'final') {\n        worker.terminate();\n        sm.flush();\n        res(model);\n      }\n    };\n    worker.postMessage({ model, processEmptyCells });\n  });\n};\n\nconst demoBoard = [\n  [5, 3, 0, 0, 7, 0, 0, 0, 0],\n  [6, 0, 0, 1, 9, 5, 0, 0, 0],\n  [0, 9, 8, 0, 0, 0, 0, 6, 0],\n  [8, 0, 0, 0, 6, 0, 0, 0, 3],\n  [4, 0, 0, 8, 0, 3, 0, 0, 1],\n  [7, 0, 0, 0, 2, 0, 0, 0, 6],\n  [0, 6, 0, 0, 0, 0, 2, 8, 0],\n  [0, 0, 0, 4, 1, 9, 0, 0, 5],\n  [0, 0, 0, 0, 8, 0, 0, 7, 9]\n];\n\nconst Board = () => {\n  const [model, setModel] = useState(modelFrom(demoBoard));\n  const modelIsValid = useMemo(() => isValidModel(model), [model]);\n  const [status, setStatus] = useState('');\n  const [reverse, setReverse] = useState(true);\n  const reverseChanged = useCallback(e => setReverse(e.target.checked), [\n    setReverse\n  ]);\n  const solveClick = useCallback(() => {\n    return runSolver(model, setModel, reverse ? 'reverse' : '').then(result => {\n      if (result) {\n        setStatus('Success');\n      } else {\n        setStatus(\"Can't solve\");\n      }\n    });\n  }, [model, setModel, setStatus, reverse]);\n  const clear = useCallback(() => {\n    setModel(createEmptyModel());\n  }, [setModel]);\n  const reset = useCallback(() => {\n    setModel(modelFrom(demoBoard));\n  }, [setModel]);\n\n  return (\n    <div>\n      <table className={`board ${modelIsValid ? '' : 'invalid'}`}>\n        <tbody>{Array.from(rows(model, setModel, 9))}</tbody>\n      </table>\n      <div>\n        <div className=\"info\">Values marked invalid will be ignored!</div>\n        <div>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={reverse}\n              onChange={reverseChanged}\n            />\n            Reverse (solve from bottom right)\n          </label>\n        </div>\n        <div>\n          <button onClick={clear}>Clear</button>\n          <button onClick={reset}>Reset to demo</button>\n        </div>\n        <button onClick={solveClick}>Solve</button>\n        <div className=\"status\">{status}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './Board';\n\nfunction App() {\n  return <Board />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApp = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n};\n\nif (!window.phonegap) {\n  startApp();\n} else {\n  document.addEventListener('deviceready', startApp, false);\n}\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}